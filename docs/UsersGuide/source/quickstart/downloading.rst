.. _downloading:

=====================================================
Downloading UFS Medium-Range (MR) Weather Application
=====================================================

Downloading the code and scripts
================================

Access to the code requires git. You will need access to the command line clients, ``git``
(v1.8 or greater). You can download the latest version of the release
code:

.. code-block:: console

    git clone -b release-ufs.1.0 https://github.com/ufs-community/ufs-mrweather-app.git my_ufs_sandbox
    cd my_ufs_sandbox

To checkout a previous version of application, first view the available versions:

.. code-block:: console

    git tag --list 'release-ufs*'

To checkout a specific release tag type, for example 0.1:

.. code-block:: console

    git checkout release-ufs.0.1

Finally, to checkout UFS Medium-Range (MR) Weather Model and CIME, run the **checkout_externals** script from /path/to/my_ufs_sandbox.

.. code-block:: console

    ./manage_externals/checkout_externals

The **checkout_externals** script will read the configuration file called ``Externals.cfg`` and
will download model and CIME into /path/to/my_ufs_sandbox.

To see more details regarding the checkout_externals script from the command line, type:

.. code-block:: console

    ./manage_externals/checkout_externals --help

To confirm a successful download of all components, you can run ``checkout_externals``
with the status flag to show the status of the externals:

.. code-block:: console

    ./manage_externals/checkout_externals -S

This should show a clean status for all externals, with no characters in the first two
columns of output, as in this example:

.. code-block:: console

    Checking status of externals: model, stochastic_physics, fv3, ccpp/framework, atmos_cubed_sphere, ccpp/physics, fms, ww3, nems, tests/produtil/nceplibs-pyprodutil, fv3gfs_interface, nems_interface, cime, 
    s   ./cime
        ./src/model
        ./src/model/FMS
        ./src/model/FV3
        ./src/model/FV3/atmos_cubed_sphere
        ./src/model/FV3/ccpp/framework
        ./src/model/FV3/ccpp/physics
    s   ./src/model/FV3/cime
        ./src/model/NEMS
        ./src/model/NEMS/cime/
        ./src/model/NEMS/tests/produtil/NCEPLIBS-pyprodutil
        ./src/model/WW3
        ./src/model/stochastic_physics

You should now have a complete copy of the source code in your /path/to/my_ufs_sandbox.

If there were problems obtaining an external, you might instead see something like:

.. code-block:: console

    e-  ./src/model/FV3

This might happen if there was an unexpected interruption while downloading.
First try rerunning ``./manage_externals/checkout_externals``.
If there is still a problem, try running with logging turned on using:

.. code-block:: console

   ./manage_externals/checkout_externals --logging

Check the ``manage_externals.log`` file to see what errors are reported.

Downloading input data
======================

A set of input datasets (fixed files, initial condition etc.) are needed to run the model and 
UFS Medium-Range (MR) Weather Model input data are available through a `FTP data repository 
<https://ftp.emc.ncep.noaa.gov/EIB/UFS/>`. Datasets can be downloaded on a case by case basis 
as needed and CIME-CCS provides tools to check and download input data automatically. The detailed
information about the required input datasets to run UFS Medium-Range (MR) Weather Model can be
found in here.

A local input data directory should exist on the local disk, and it also
needs to be set via the variable ``$DIN_LOC_ROOT`` and ``$DIN_LOC_IC``. By default, ``$DIN_LOC_IC``
is set to ``$DIN_LOC_ROOT/prod`` and all the input files are stored in a hierarchical way in the 
``$DIN_LOC_ROOT`` directory but user ia also able to store raw input data that is processed in the 
pre-processing step throuch the use of ``$DIN_LOC_IC`` variable. This will allow us to keep input data
in the users local space. 

For supported machines, these variables are preset and alredy set. For generic machines,
this variables are set via the ``--input-dir`` argument to **create_newcase**.
It is recommended that all users of a given filesystem share the same ``$DIN_LOC_ROOT`` directory but
the user could specialize the ``$DIN_LOC_IC`` variable.

The files in the subdirectories of ``$DIN_LOC_ROOT`` should be write-protected. This prevents these files 
from being accidentally modified or deleted. The directories in ``$DIN_LOC_ROOT`` should generally
be group writable, so the directory can be shared among multiple users.

As part of the process of generating the UFS Medium-Range (MR) Weather Application executable, 
the utility, **check_input_data** located in each case directory
is called, and it attempts to locate all required input data for the
case based upon file lists generated by components. If the required
static data is not found on local disk in ``$DIN_LOC_ROOT`` and raw initial conditions in ``$DIN_LOC_IC``,
then the data will be downloaded automatically by the scripts or it can be
downloaded by the user by invoking **check_input_data** with the ``--download``
command argument. If you want to download the input data manually you
should do it before you build the UFS Medium-Range (MR) Weather Application.

The UFS Medium-Range (MR) Weather Application currently supports following dataset/s as a raw 
input data:

* Global Forecast System (GFS) 
  
  The GFS model is a coupled weather forecast model, composed of four separate models which work
  together to provide an accurate picture of weather conditions. GFS covers the entire globe down
  to a horizontal resolution of 28km.

  The data is distributed through NOAA Operational Model Archive and Distribution System (`NOMADS 
  <https://nomads.ncep.noaa.gov/pub/data/nccf/com/gfs/prod/>`_)

.. note::

    The default input data that belongs to 2019-09-09 00 UTC is also available on `NOAA EMC's FTP data 
    repository <https://ftp.emc.ncep.noaa.gov/EIB/UFS/>`_.
